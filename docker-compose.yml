version: '3.9'

services:
  master:
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_master"
    image: "citusdata/citus:11.3.0"
    ports: [ "${COORDINATOR_EXTERNAL_PORT:-5432}:5432" ]
    labels: [ "com.citusdata.role=Master" ]
    volumes:
      - ./sharding/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment: &AUTH
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      PGUSER: "${POSTGRES_USER:-postgres}"
      PGPASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_HOST_AUTH_METHOD: "${POSTGRES_HOST_AUTH_METHOD:-trust}"

  worker:
    image: "citusdata/citus:11.3.0"
    labels: [ "com.citusdata.role=Worker" ]
    depends_on: [ manager ]
    environment: *AUTH
    command: "/wait-for-manager.sh"
    volumes:
      - healthcheck-volume:/healthcheck

  manager:
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_manager"
    image: "citusdata/membership-manager:0.3.0"
    volumes:
      - "${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock"
      - healthcheck-volume:/healthcheck
    depends_on: [ master ]
    environment: *AUTH

  rabbitmq:
    image: rabbitmq:3-management
    container_name: "rabbitmq"
    ports:
      - "5672:5672"
      - "15672:15672"
      # Admin http://localhost:15672/ guest / guest

  tarantool:
    image: tarantool/tarantool:latest
    container_name: "tarantool"
    ports:
      - "3301:3301"
    volumes:
      - ./tarantool/conf/init.lua:/opt/tarantool/init.lua
      - ./tarantool/data:/var/lib/tarantool

  otus-app:
    image: otus-app:latest
    container_name: "otus-app"
    depends_on:
      - master
      - rabbitmq
    ports:
      - '8080:8080'
    environment:
      SPRING_APPLICATION_JSON: '{
               "server.port": 8080,
               "spring.liquibase.url": "jdbc:postgresql://master:5432/postgres?autoReconnect=true&useSSL=false&allowPublicKeyRetrieval=true",
               "spring.datasource.url": "jdbc:postgresql://master:5432/postgres?useSSL=false&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true",
               "spring.r2dbc.url": "r2dbc:pool:postgresql://master/postgres?tlsVersion=TLSv1.2",
               "spring.datasource.replicaUrl": "jdbc:postgresql://master:5432/postgres?useSSL=false&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true",
               "spring.rabbitmq.host": "rabbitmq",
               "spring.rabbitmq.port": 5672,
               "otus.dialoguesHost": "http://otus-dialogues-app:8081"       
             }'
    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true

  otus-dialogues-app:
    image: otus-dialogues-app:latest
    container_name: "otus-dialogues-app"
    depends_on:
      - tarantool
    ports:
      - '8081:8081'
    environment:
      SPRING_APPLICATION_JSON: '{
               "spring.datasource.url": "jdbc:postgresql://master:5432/postgres?useSSL=false&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true",
               "spring.r2dbc.url": "r2dbc:pool:postgresql://master/postgres?tlsVersion=TLSv1.2",
               "spring.datasource.replicaUrl": "jdbc:postgresql://master:5432/postgres?useSSL=false&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true",
               "tarantool.host": "tarantool",
               "tarantool.port": 3301
             }'

  redis:
    image: redis:6
    container_name: "redis-server"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - ./redis/data:/data

  otus-counter-app:
    image: otus-counter-app:latest
    container_name: "otus-counter-app"
    depends_on:
      - redis
    ports:
      - '8083:8083'
    environment:
      SPRING_APPLICATION_JSON: '{
               "spring.data.redis.host": "redis-server",
               "spring.data.redis.port": "6379",
               "otus.counterServiceHost": "http://otus-counter-app:8083"
             }'

#  prometheus:
#    image: prom/prometheus:latest
#    container_name: "prometheus"
#    volumes:
#      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#    ports:
#      - "9090:9090"
#    restart: unless-stopped
#
#  grafana:
#    image: grafana/grafana:latest
#    container_name: "grafana"
#    ports:
#      - "3000:3000"
#    restart: unless-stopped
#    volumes:
#      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
#      - grafana-data:/var/lib/grafana
#
#  postgres-server: # The Postgres Database Service
#    image: postgres:latest
#    container_name: "postgres-server"
#    restart: always
#    environment: # Username, password and database name variables
#      POSTGRES_USER: zabbix
#      POSTGRES_PASSWORD: zabbix
#      POSTGRES_DB: zabbix
#      PG_DATA: /var/lib/postgresql/data/pgdata #data storage
#
#  zabbix-server: # The main Zabbix Server Software Service
#    image: zabbix/zabbix-server-pgsql:alpine-3.2-latest
#    container_name: "zabbix-server"
#    restart: on-failure
#    environment: # The Postgres database value variable
#      POSTGRES_USER: zabbix
#      POSTGRES_PASSWORD: zabbix
#      POSTGRES_DB: zabbix
#      ZBX_HISTORYSTORAGETYPES: log,text #Zabbix configuration variables
#      ZBX_DEBUGLEVEL: 1
#      ZBX_HOUSEKEEPINGFREQUENCY: 1
#      ZBX_MAXHOUSEKEEPERDELETE: 5000
#    ports:
##      - "10060:10050"
#      - "10051:10051"
#    depends_on:
#      - postgres-server
##    volumes: # Volumes for scripts and related files you can add
##      - ./zabbix/alertscripts:/usr/lib/zabbix/alertscripts
#
#  zabbix-web: # The main Zabbix web UI or interface
#    image: zabbix/zabbix-web-nginx-pgsql:alpine-3.2-latest
#    restart: always
#    environment: # Postgre database variables
#      POSTGRES_USER: zabbix
#      POSTGRES_PASSWORD: zabbix
#      POSTGRES_DB: zabbix
#      ZBX_SERVER_HOST: zabbix-server  # Zabbix related and Php variables
#      ZBX_POSTMAXSIZE: 64M
#      PHP_TZ: "Asia/Kolkata"
#      ZBX_MAXEXECUTIONTIME: 500
#    depends_on:
#      - postgres-server
#      - zabbix-server
#    ports: # Port where Zabbix UI is available
#      - "8090:80"
#
#  zabbix-agent: # Zabbix agent service that tracks usage and send to zabbix server
#    image: zabbix/zabbix-agent:alpine-3.2-latest
#    privileged: true   #access mode for allowing resource access
#    network_mode: "host"
#    restart: unless-stopped
#    environment:
#      - ZBX_SERVER_HOST=127.0.0.1 #the IP/Dns of Zabbix server

#  redis-commander:
#    image: rediscommander/redis-commander:latest
#    restart: always
#    environment:
#      - REDIS_HOSTS=local:redis:6379
#    ports:
#      - "8091:8081"

volumes:
  healthcheck-volume:
  grafana-data:
